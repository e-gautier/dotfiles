---
- name: Run requirements
  ansible.builtin.import_tasks: requirements.yml
- name: Add RPM keys
  become: true
  ansible.builtin.rpm_key:
    key: "{{ item }}"
  loop: "{{ rpm_keys }}"
- name: Install dnf repos
  become: true
  ansible.builtin.dnf:
    name: "{{ item }}"
  loop: "{{ dnf.repos }}"
- name: Install Microsoft repo
  become: true
  ansible.builtin.get_url:
    url: https://packages.microsoft.com/config/rhel/7/prod.repo
    dest: /etc/yum.repos.d/microsoft.repo
    force: true
- name: Install VSCodium repo
  become: true
  ansible.builtin.copy:
    content: |
      [gitlab.com_paulcarroty_vscodium_repo]
      name=gitlab.com_paulcarroty_vscodium_repo
      baseurl=https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/rpms/
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg
    dest: /etc/yum.repos.d/vscodium.repo
- name: Configure battery low threshold
  become: true
  ansible.builtin.copy:
    content: SUBSYSTEM=="power_supply", ATTR{status}=="Discharging", ATTR{capacity}=="[0-10]", RUN+="/usr/bin/systemctl hybrid-sleep"
    dest: /etc/udev/rules.d/99-low-battery.rules
- name: Setup logind configuration
  become: true
  ansible.builtin.replace:
    path: /etc/systemd/logind.conf
    regexp: "^#{{ item }}(=.*)$"
    replace: "{{ item }}\\1"
  loop:
    - HandlePowerKey
    - HandleSuspendKey
    - HandleHibernateKey
    - HandleLidSwitch
    - HandleLidSwitchExternalPower
    - HandleLidSwitchDocked
- name: Setup DNS configuration
  ansible.builtin.import_tasks: dns.yml
  become: true
- name: Setup Docker
  ansible.builtin.import_tasks: docker.yml
  become: true
- name: Setup Vagrant
  ansible.builtin.import_tasks: vagrant.yml
  become: true
- name: Setup security updates
  ansible.builtin.import_tasks: security-updates.yml
  become: true
- name: Install packages
  become: true
  when: install_packages is defined and install_packages != "N"
  ansible.builtin.package:
    name: "{{ packages[item] }}"
    state: present
  loop: "{{ install_packages.split(',') }}"
- name: Install Pip packages
  when: install_pip_packages is defined and install_pip_packages != "N"
  ansible.builtin.pip:
    name: "{{ pip }}"
    extra_args: --user
- name: Homebrew clone repo
  ansible.builtin.git:
    repo: https://github.com/Homebrew/brew
    dest: ~/.homebrew
  when: install_homebrew is defined and install_homebrew != "N"
- name: Install Homebrew packages
  community.general.homebrew:
    name: "{{ homebrew }}"
    update_homebrew: true
    upgrade_all: true
  when: install_homebrew is defined and install_homebrew != "N"
- name: Install Cargo packages
  community.general.cargo:
    name: "{{ cargo }}"
  when: install_cargo is defined and install_cargo != "N"
- name: Add the flathub flatpak repository remote to the user installation
  community.general.flatpak_remote:
    name: flathub
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user
  when: install_flatpak is defined and install_flatpak != "N"
- name: Install flatpak packages
  community.general.flatpak:
    name: "{{ flatpak }}"
    remote: flathub
  when: install_flatpak is defined and install_flatpak != "N"
- name: Setup symlinks
  ansible.builtin.import_tasks: symlinks.yml
- name: Create vim undodir
  ansible.builtin.file:
    path: ~/.vim/undodir
    state: directory
- name: Install fonts
  ansible.builtin.shell: if hash fc-cache 2>/dev/null; then fc-cache -f; fi
  register: output
  changed_when: output.rc != 0
- name: Setup nftables
  ansible.builtin.import_tasks: nftables.yml
  become: true
- name: Setup Nerdfonts
  ansible.builtin.import_tasks: nerd-fonts.yml
  when: install_nerdfont is defined and install_nerdfonts != "N"
- name: Install VSCode extensions
  ansible.builtin.shell:
    cmd: "codium --install-extension {{ item }} ||:"
  loop: "{{ vscodium_extensions }}"
  register: output
  changed_when: output.rc != 0
- name: Install snaps
  community.general.snap:
    name: "{{ snaps }}"
  when: install_snaps is defined and install_snaps != "N"
- name: Setup powertop unit
  become: true
  ansible.builtin.template:
    src: unit.service.j2
    dest: /etc/systemd/system/powertop.service
  vars:
    description: powertop autotune
    type: oneshot
    exec_start: /usr/sbin/powertop --auto-tune
    wanted_by: multi-user.target
- name: Enable systemd user services
  ansible.builtin.systemd:
    name: "{{ item }}"
    scope: user
    state: restarted
    enabled: true
    daemon_reload: true
  loop: "{{ units.user.enabled }}"
  ignore_errors: true
- name: Enable systemd system services
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: restarted
    enabled: true
    daemon_reload: true
  loop: "{{ units.system.enabled }}"
  ignore_errors: true
  register: output
  changed_when: output.enabled != true
- name: Disable systemd system services
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    daemon_reload: true
  when: item ~ ".service" in ansible_facts.services
  loop: "{{ units.system.disabled }}"
  ignore_errors: true
- name: Put user in groups
  become: true
  ansible.builtin.user:
    name: etienne
    groups:
      - docker
      - wireshark
    append: true
  ignore_errors: true
